<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Neil H. Watson</title>
        <link>http://ettin/blog/</link>
        <atom:link href="http://ettin/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of Neil H. Watson</description>
        <generator>Statocles 0.059</generator>
        <item>
            <title>Avoid the cost of renaming hundreds of hosts</title>
            <link>http://ettin/blog/2013/02/22/dns-renaming/</link>
            <guid>http://ettin/blog/2013/02/22/dns-renaming/</guid>
            <description><![CDATA[
                <p>Your hosts are named after your data centre. Now you must move hundreds of hosts to another data centre. Do you rename them or abandon the naming convention?</p>

<p>A client of mine is facing this challenge. I&#39;ve discussed host naming before.. Host are not static. They change functions and locations. Think ahead before naming them.</p>

                    <p><a href="http://ettin/blog/2013/02/22/dns-renaming/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://ettin/blog/tag/dns/">dns</a>
                </p>
            ]]></description>
            <pubDate>
                Fri, 22 Feb 2013 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Variable references with Cfengine</title>
            <link>http://ettin/blog/2012/10/19/cfengine-var-refs/</link>
            <guid>http://ettin/blog/2012/10/19/cfengine-var-refs/</guid>
            <description><![CDATA[
                <p>Variables in Cfengine can be confusing at times. Here are some examples of variable references. References are not strictly required, but they are good practice like using the strict module in Perl.</p>

<p>bundle agent main {</p>

<p>vars:
      &quot;meta_purpose&quot; string =&gt; &quot;Demonstrate references&quot;;</p>

<pre><code>  &quot;my_scalar&quot; string       =&gt; &quot;This is a scalar typed as astring&quot;;
  &quot;my_list&quot; slist          =&gt; { &quot;one&quot;, &quot;two&quot;, &quot;three&quot; };
  &quot;my_array[red]&quot; string   =&gt; &quot;Red element of associative array&quot;;
  &quot;my_array[blue]&quot; string  =&gt; &quot;Blue element of associative array&quot;;
  &quot;my_array[green]&quot; string =&gt; &quot;Green element of associative array&quot;;
</code></pre>

<p>methods:
      &quot;any&quot; usebundle =&gt; test(
         &quot;main.my_scalar&quot;,
         &quot;main.my_list&quot;,
         &quot;main.my_array&quot;
         );
}</p>

<p>bundle agent test(scalarref, listref, arrayref) {</p>

<p>vars:
      &quot;local_scalar&quot;
         string =&gt; &quot;${${scalarref}}&quot;;</p>

<pre><code>  &quot;local_list&quot;
     slist =&gt; { &quot;@{${listref}}&quot; };

  &quot;arrayref_index&quot;
     slist =&gt; getindices(&quot;${arrayref}&quot;);

  &quot;local_array[${arrayref_index}]&quot;
     string =&gt; &quot;${${arrayref}[${arrayref_index}]}&quot;;

  &quot;local_array_index&quot;
     policy =&gt; &#39;free&#39;,
     slist =&gt; getindices(&quot;local_array&quot;);
</code></pre>

<p>reports:
      cfengine::
         &quot;scalarref         =&gt; ${${scalarref}}&quot;;
         &quot;local_scalar      =&gt; ${local_scalar}&quot;;
         &quot;local_list        =&gt; ${local_list}&quot;;
         &quot;arrayref_index    =&gt; ${arrayref_index}&quot;;
         &quot;arrayref item     =&gt; ${${arrayref}[${arrayref_index}]}&quot;;
         &quot;local_array_index =&gt; ${local_array_index}&quot;;
         &quot;local_array item  =&gt; ${local_array[${local_array_index}]}&quot;;
}</p>

<p>Now let&#39;s run it:</p>

<p>$ cf-agent -f ./references.cf 
R: scalarref         =&gt; This is a scalar typed as astring
R: local_scalar      =&gt; This is a scalar typed as astring
R: local_list        =&gt; one
R: local_list        =&gt; two
R: local_list        =&gt; three
R: arrayref_index    =&gt; red
R: arrayref_index    =&gt; blue
R: arrayref_index    =&gt; green
R: arrayref item     =&gt; Red element of associative array
R: arrayref item     =&gt; Blue element of associative array
R: arrayref item     =&gt; Green element of associative array
R: local_array_index =&gt; green
R: local_array_index =&gt; red
R: local_array_index =&gt; blue
R: local_array item  =&gt; Green element of associative array
R: local_array item  =&gt; Red element of associative array
R: local_array item  =&gt; Blue element of associative array</p>

                    <p><a href="http://ettin/blog/2012/10/19/cfengine-var-refs/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://ettin/blog/tag/cfengine/">cfengine</a>
                </p>
            ]]></description>
            <pubDate>
                Fri, 19 Oct 2012 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>IPv6 Migration part 8</title>
            <link>http://ettin/blog/2012/08/01/ipv6-migration-part8/</link>
            <guid>http://ettin/blog/2012/08/01/ipv6-migration-part8/</guid>
            <description><![CDATA[
                <p>DNS for IPV6 is just like IPV4, but longer. In part 2 I discussed DNS quad A records. Now I&#39;ll explain IPV6 PTR records.</p>

<p>In this example I&#39;ll use Bind and the subnet 2001:470:1d:a2f::/64. First load the zone file.</p>

<p>zone &quot;f.2.a.0.d.1.0.0.0.7.4.0.1.0.0.2.ip6.arpa&quot; {
   type master;
   file &quot;/etc/bind/db.2001:470:1d:a2f&quot;;
};</p>

<p>Note that &quot;ipv6.arpa&quot; is different than IPV4 (in-addr.arpa). The 16 numbers in the zone make up the subnet (a /64). As is custom, they are in reverse order. The last 16 digits, not shown here, are all part of the subnet and are not yet needed.</p>

<p>In PTR records, IPV6 addresses must be reversed just like IPV4 addresses. When done manually this can drive you mental because IPV6 addresses are up to 32 characters long. Fortunately you can use tools to reverse these for you. Consider the humble host command.</p>

<h1>host 2001:470:1d:a2f::1</h1>

<p>1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.f.2.a.0.d.1.0.0.0.7.4.0.1.0.0.2.ip6.arpa domain name pointer alix.watson-wilson.ca.</p>

<p>Also, the dig command.</p>

<h1>dig -x 2001:470:1d:a2f::1</h1>

<p>; &lt;&lt;&gt;&gt; DiG 9.8.4-rpz2+rl005.12-P1 &lt;&lt;&gt;&gt; -x 2001:470:1d:a2f::1
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6661
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 3</p>

<p>;; QUESTION SECTION:
;1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.f.2.a.0.d.1.0.0.0.7.4.0.1.0.0.2.ip6.arpa. IN PTR</p>

<p>Avid script writers are invited to create ingenious ways to cut the first or last 16 digits as needed. Next up the zone file.</p>

<p>;; 2001:470:1d:a2f/64
$TTL 3h
@ IN SOA sol.watson-wilson.ca. hostmaster.watson-wilson.ca. (
        30              ; TODO SERIAL
        3h              ; 3 hour refresh
        1h              ; 1 hour retry
        1w              ; 1 week expire
        1h)     ; negatic TTL cache</p>

<p>NS sol.watson-wilson.ca.
   NS alix.watson-wilson.ca.</p>

<p>$ORIGIN f.2.a.0.d.1.0.0.0.7.4.0.1.0.0.2.ip6.arpa.</p>

<p>1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN PTR alix.watson-wilson.ca.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN PTR ettin.watson-wilson.ca.
3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN PTR scope.watson-wilson.ca.</p>

<p>Most of the file is as we would use in IPV4. The last parts are IPV6 related. The &#39;$ORIGIN&#39; denotes the subnet. This is a short cut. Bind will know to add this to the PTR records below it. The PTR records show the last 16 digits of the IP address, again in reverse order. Bind will put the origin and the PTR record together like this:</p>

<p>1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.f.2.a.0.d.1.0.0.0.7.4.0.1.0.0.2.ip6.arpa IN PTR alix.watson-wilson.ca.</p>

<p>That&#39;s enough for working PTR records in IPV6. I hope you found this help.</p>

                    <p><a href="http://ettin/blog/2012/08/01/ipv6-migration-part8/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://ettin/blog/tag/ipv6/">ipv6</a>
                    <a href="http://ettin/blog/tag/networking/">networking</a>
                </p>
            ]]></description>
            <pubDate>
                Wed, 01 Aug 2012 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>IPv6 Migration part 7</title>
            <link>http://ettin/blog/2012/07/25/ipv6-migration-part7/</link>
            <guid>http://ettin/blog/2012/07/25/ipv6-migration-part7/</guid>
            <description><![CDATA[
                <p>I&#39;ve broken up with SixXS. Hurricane Electric is my new girl.</p>

<p>It all started when an error in my Cfengine service began restarting SixXS&#39;s tunnel daemon, aiccu, four times per hour. SixXS viewed this as improper behavior and disabled my account. The irony is that my account was disabled by a daemon and not by a human. Let me explain. I contacted SixXS support to have my account turned back on. I explained what had happened and that the problem had been fixed. I was told that I was not supposed to run aiccu under any automatic service. Aiccu is supposed to run on its own. If it breaks, a human is meant to intervene. See the irony? But really, who manages daemons manually these days? Is this the stone age? Sure enough, check out SixXS&#39;s aiccu terms of use.</p>

<p>I tried to convince the SixXS person that automation is good. He was not swayed. Disheartened, I consulted with the nice folks of #ipv6 at Freenode. It seems many have had fights and breakups with SixXS. Eventually I did get my account back, but only after many emails and by promising to manually run and manage aiccu. My heart was broken. I knew, in the future, I would clash with SixXS again on some trivial infraction. In this relationship, is was all SixXS. I knew we had to break up.</p>

<p>What mends a broken heart the best? Getting in a better relationship before your ex does. And along came Hurricane Electric. The folks at #ipv6 recommended HE to me. Like SixXS, HE offers free tunnels. Unlike SixXS, HE also offers paid network and hosting services. Their free tunnel service has interesting features.</p>

<pre><code>Users can take online tests to gain IPV6 experience ranks. These ranks are fun to brag about, but they also allow HE staff to gauge your IPV6 knowledge when dealing with you.
You can have up to 5 tunnels per account. Each tunnel has its own /64 or /48 IPV6 address block.
Tunnels are simple IP tunnels requiring no daemon. A clever URL based API allows those with a dynamic IPV4 address to quickly change the tunnel to match a changed IPV4 address. This can be automated.
IRC and SMTP ports are blocked by default. I was able to unblock IRC myself using HE&#39;s tunnel manager web page. I was also able to unblock SMTP after a no hassle email to HE support. I&#39;m told that this was easy for me because I took the HE online tests to reach &#39;Sage&#39; level before hand.
</code></pre>

<p>I&#39;m happy with HE. Is has not been long, but I feel like HE might be THE ONE.</p>

<p><a href="http://ipv6.he.net/certification/scoresheet.php?pass_name=neilhwatson" target="_blank"><img alt="IPv6 Certification Badge for neilhwatson" src="http://ipv6.he.net/certification/create_badge.php?pass_name=neilhwatson&amp;badge=1" style="border: 0; width: 128px; height: 128px"></a></p>

                    <p><a href="http://ettin/blog/2012/07/25/ipv6-migration-part7/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://ettin/blog/tag/ipv6/">ipv6</a>
                    <a href="http://ettin/blog/tag/networking/">networking</a>
                </p>
            ]]></description>
            <pubDate>
                Wed, 25 Jul 2012 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>IPv6 Migration part 6</title>
            <link>http://ettin/blog/2012/07/05/ipv6-migration-part6/</link>
            <guid>http://ettin/blog/2012/07/05/ipv6-migration-part6/</guid>
            <description><![CDATA[
                <p>Liberation! Using IPV6, I have 18,446,744,073,709,551,616 public IP addresses. This is considered a small offering (/64). Normally, an organization would get a /48 network that contains 65536 /64 subnets.</p>

<p>Previously my local IPV6 setup was limited to just my workstation. It initiated the 6in4 tunnel to my IPV6 tunnel broker, Sixxs. Recently this tunnel malfunctioned. I think it was due to it passing through a NAT IPV4 router. I did not discover the problem but, I did move on the next stage. Now my router handles the tunnel and my workstation has a static IPV6 address from the /64 block provided by Sixxs.</p>

<p>My router is an Alix system running Linux. Moving the tunnel from my workstation to the router was quite simple. Note, that in part 1 I was using a static tunnel. With IPV4 addresses in short supply, and poor ISP quality in Canada, I had to move to a dynamic IP address setup. Sixxs provides a daemon called Aiccu to tunnel through dynamic IPV4 setups. Debian has the Aiccu package. With simple apt-get install you are ready to configure your tunnel. The configuration file is /etc/aiccu.conf. Set a username, password, protocol, and server in the file. All of these are provided by Sixxs. The rest of the file can be left at the defaults.
home-ipv6.png</p>

<p>My router has two interfaces. One faces the Internet and the other faces my internal network. The 6in4 tunnel provides an IPV6 address to the external interface. It is not part of the IPV6 subnet provided to me. That subnet is attached to the inside interface. In those simple steps you have your first IPV6 subnet. If you work with IPV4 then this looks familiar. At this level IPV4 and IPV6 work the same way. Don&#39;t let the IPV6 address syntax scare you. Just remember that IPV6 requires its own firewall. In Linux that is ip6tables.</p>

                    <p><a href="http://ettin/blog/2012/07/05/ipv6-migration-part6/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://ettin/blog/tag/ipv6/">ipv6</a>
                    <a href="http://ettin/blog/tag/networking/">networking</a>
                </p>
            ]]></description>
            <pubDate>
                Thu, 05 Jul 2012 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

