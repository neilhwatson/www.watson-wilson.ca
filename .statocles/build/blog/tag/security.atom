<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://watson-wilson.ca/blog/tag/security/</id>
    <title>Neil H. Watson</title>
    <updated>2017-04-29T00:00:00Z</updated>
    <link rel="self" href="http://watson-wilson.ca/blog/tag/security.atom"/>
    <link rel="alternate" href="http://watson-wilson.ca/blog/tag/security/"/>
    <generator version="0.094">Statocles</generator>
    <entry>
        <id>http://watson-wilson.ca/blog/2017/04/29/ipv6-priv/</id>
        <title>Linux, Ubiquity, and IPv6 privacy extensions</title>
        <link rel="alternate" href="http://watson-wilson.ca/blog/2017/04/29/ipv6-priv/" />
        <content type="html"><![CDATA[
            <p><img alt="Success with IPv6" src="http://watson-wilson.ca/static/images/ipv6-success-kid.jpg" style="float:right" width="150"></p>

<p>Here are some quick notes about IPv6 on an Ubiquity router and Linux clients, using privacy extensions. With IPv6 everyone gets a public IP address. In order to offer some privacy, the IPv6 privacy extensions allow clients to change IPv6 addresses over a period of time.</p>

                <p><a href="http://watson-wilson.ca/blog/2017/04/29/ipv6-priv/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/ipv6/">ipv6</a>
                <a href="http://watson-wilson.ca/blog/tag/security/">security</a>
                <a href="http://watson-wilson.ca/blog/tag/linux/">linux</a>
                <a href="http://watson-wilson.ca/blog/tag/networking/">networking</a>
                <a href="http://watson-wilson.ca/blog/tag/slaac/">slaac</a>
            </p>
        ]]></content>
        <updated>2017-04-29T00:00:00Z</updated>
        <category term="ipv6" />
        <category term="security" />
        <category term="linux" />
        <category term="networking" />
        <category term="slaac" />
    </entry>
    <entry>
        <id>http://watson-wilson.ca/blog/2015/09/30/essential-audit-reports-with-delta-reporting/</id>
        <title>Essential audit reports with Delta Reporting</title>
        <author><name>nwatson</name></author>
        <link rel="alternate" href="http://watson-wilson.ca/blog/2015/09/30/essential-audit-reports-with-delta-reporting/" />
        <content type="html"><![CDATA[
            <p><img alt="Delta Reporting dashboard" src="http://watson-wilson.ca/static/images/dr-dashboard.png">
Delta Reporting has simple yet powerful reports. See a gallery of essential
ones
<a href="https://github.com/neilhwatson/delta_reporting/blob/master/Screenshots.md">here</a></p>

                <p><a href="http://watson-wilson.ca/blog/2015/09/30/essential-audit-reports-with-delta-reporting/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/cfengine/">cfengine</a>
                <a href="http://watson-wilson.ca/blog/tag/delta-reporting/">delta reporting</a>
                <a href="http://watson-wilson.ca/blog/tag/security/">security</a>
            </p>
        ]]></content>
        <updated>2015-09-30T11:34:03Z</updated>
        <category term="cfengine" />
        <category term="delta reporting" />
        <category term="security" />
    </entry>
    <entry>
        <id>http://watson-wilson.ca/blog/2015/09/18/auditing-hosts-using-cfengine-efl-and-delta-reporting/</id>
        <title>Auditing hosts using CFEngine, EFL, and Delta Reporting</title>
        <author><name>nwatson</name></author>
        <link rel="alternate" href="http://watson-wilson.ca/blog/2015/09/18/auditing-hosts-using-cfengine-efl-and-delta-reporting/" />
        <content type="html"><![CDATA[
            <p><img alt="Clip board" src="http://watson-wilson.ca/static/images/Liste-300px.png"></p>

<p>Sometimes you want to audit a host without changing it. This can be
hard with CFEngine, but with <a href="https://github.com/neilhwatson/evolve_cfengine_freelib">EFL</a>
and <a href="https://github.com/neilhwatson/delta_reporting">Delta Reporting</a>
it&#39;s possible.</p>

                <p><a href="http://watson-wilson.ca/blog/2015/09/18/auditing-hosts-using-cfengine-efl-and-delta-reporting/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/cfengine/">cfengine</a>
                <a href="http://watson-wilson.ca/blog/tag/delta-reporting/">delta reporting</a>
                <a href="http://watson-wilson.ca/blog/tag/efl/">EFL</a>
                <a href="http://watson-wilson.ca/blog/tag/security/">security</a>
                <a href="http://watson-wilson.ca/blog/tag/software-testing/">software testing</a>
            </p>
        ]]></content>
        <updated>2015-09-18T13:52:10Z</updated>
        <category term="cfengine" />
        <category term="delta reporting" />
        <category term="EFL" />
        <category term="security" />
        <category term="software testing" />
    </entry>
    <entry>
        <id>http://watson-wilson.ca/blog/2014/09/26/shellshock-free-with-cfengine-and-delta-reporting/</id>
        <title>Shellshock free with CFEngine and Delta Reporting</title>
        <author><name>nwatson</name></author>
        <link rel="alternate" href="http://watson-wilson.ca/blog/2014/09/26/shellshock-free-with-cfengine-and-delta-reporting/" />
        <content type="html"><![CDATA[
            <p><img alt="Hosts reported free of shell shock" src="http://watson-wilson.ca/static/images/shell_shock.png"></p>

<p>Above is a screenshot from Evolve&#39;s production <a href="https://github.com/neilhwatson/delta_reporting">Delta Reporting</a>
service. These hosts are safe from Shell shock. Thanks to Delta
Reporting, <a href="https://github.com/neilhwatson/evolve_cfengine_freelib">EFL</a>,
and <a href="http://cfengine.com">CFEngine</a> our journey to a safe harbour was
not long. First we had to design a test for the vulnerability.</p>

                <p><a href="http://watson-wilson.ca/blog/2014/09/26/shellshock-free-with-cfengine-and-delta-reporting/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/cfengine/">cfengine</a>
                <a href="http://watson-wilson.ca/blog/tag/delta-reporting/">delta reporting</a>
                <a href="http://watson-wilson.ca/blog/tag/efl/">EFL</a>
                <a href="http://watson-wilson.ca/blog/tag/security/">security</a>
            </p>
        ]]></content>
        <updated>2014-09-26T10:47:04Z</updated>
        <category term="cfengine" />
        <category term="delta reporting" />
        <category term="EFL" />
        <category term="security" />
    </entry>
    <entry>
        <id>http://watson-wilson.ca/blog/2013/08/07/secure-sysctl-settings-with-cfengine/</id>
        <title>Secure sysctl settings with CFEngine</title>
        <author><name>nwatson</name></author>
        <link rel="alternate" href="http://watson-wilson.ca/blog/2013/08/07/secure-sysctl-settings-with-cfengine/" />
        <content type="html"><![CDATA[
            <p>Here&#39;s how to maintain Linux sysctl settings across all hosts in
an organization using the Evolve <a href="http://watson-wilson.ca/evolve-thinkings-free-cfengine-library/">free promise library</a>
and CFEngine. ---</p>

<p>Sysctl data is separated from CFEngine policy in its own data file.</p>

<pre><code># sysctl.txt
# Promise sysctl.conf and live kernel settings

# context(0) ;; sysctl variable name(1)         ;; value(2) ;; promisee(3)
any          ;; net.ipv6.conf.all.accept_ra     ;; 0        ;; ipv6 auto assign
any          ;; net.ipv6.conf.all.autoconf      ;; 0        ;; ipv6 auto assign
any          ;; net.ipv6.conf.default.autoconf  ;; 0        ;; ipv6 auto assign
any          ;; net.ipv6.conf.eth0.accept_ra    ;; 0        ;; ipv6 auto assign
sol          ;; net.ipv6.conf.bond0.accept_ra   ;; 0        ;; ipv6 auto assign

alix         ;; net.ipv6.conf.all.forwarding    ;; 1        ;; Routing
alix         ;; net.ipv4.ip_forward             ;; 1        ;; Routing
neptune      ;; proc.sys.kernel.sysrq           ;; 0        ;; Laptop security
</code></pre>

<p>Columns labeled 1 and 2 are the sysctl setting name and the value.
Column 3 is the promisee, used for documentation. Column 0 is the class
or context that must be true for the sysctl setting to be applied.</p>

<p>The Evolve free promise library has two sysctl bundles. One promises
live sysctl settings and the other promises the sysctl.conf file. Use
methods promises to call each bundle, passing the same parameter file.</p>

<pre><code>methods:

&quot;live sysctl settings&quot;
   usebundle =&gt; efl_sysctl_live( &quot;${sys.workdir}/inputs/bundle_params/sysctl.txt&quot; ),
   action    =&gt; if_elapsed( &quot;240&quot; );

&quot;sysctl conf settings&quot;
   usebundle =&gt; efl_sysctl_conf_file( &quot;${sys.workdir}/inputs/bundle_params/sysctl.txt&quot; ),
   action    =&gt; if_elapsed( &quot;240&quot; );
</code></pre>

<p>The live bundle calls the sysctl command often. If_elapsed is used to
reduce the load from excessive promise evaluation.</p>

                <p><a href="http://watson-wilson.ca/blog/2013/08/07/secure-sysctl-settings-with-cfengine/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/cfengine/">cfengine</a>
                <a href="http://watson-wilson.ca/blog/tag/efl/">EFL</a>
                <a href="http://watson-wilson.ca/blog/tag/linux/">linux</a>
                <a href="http://watson-wilson.ca/blog/tag/security/">security</a>
                <a href="http://watson-wilson.ca/blog/tag/sysctl/">sysctl</a>
            </p>
        ]]></content>
        <updated>2013-08-07T16:13:42Z</updated>
        <category term="cfengine" />
        <category term="EFL" />
        <category term="linux" />
        <category term="security" />
        <category term="sysctl" />
    </entry>
</feed>

