<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Neil H. Watson</title>
        <link>http://watson-wilson.ca/blog/tag/cloud/</link>
        <atom:link href="http://watson-wilson.ca/blog/tag/cloud.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of Neil H. Watson</description>
        <generator>Statocles 0.083</generator>
        <item>
            <title>AWS single host resilience with autoscaling groups</title>
            <link>http://watson-wilson.ca/blog/2018/02/11/aws-asg-of-one/</link>
            <guid>http://watson-wilson.ca/blog/2018/02/11/aws-asg-of-one/</guid>
            <description><![CDATA[
                <p><a href="https://aws.amazon.com/"><img alt="aws logo" src="http://watson-wilson.ca/static/images/aws.png" style="float:right" width="120px"></a></p>

<p>Make even a single AWS EC2 host highly available using autoscaling groups. Here&#39;s example using ASG, EFS for persistent data, and Terraform for easy automation.</p>

                    <p><a href="http://watson-wilson.ca/blog/2018/02/11/aws-asg-of-one/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://watson-wilson.ca/blog/tag/aws/">AWS</a>
                    <a href="http://watson-wilson.ca/blog/tag/cloud/">cloud</a>
                    <a href="http://watson-wilson.ca/blog/tag/asg/">asg</a>
                    <a href="http://watson-wilson.ca/blog/tag/autoscaling/">autoscaling</a>
                    <a href="http://watson-wilson.ca/blog/tag/high-availability/">high availability</a>
                    <a href="http://watson-wilson.ca/blog/tag/terraform/">terraform</a>
                </p>
            ]]></description>
            <pubDate>
                Sun, 11 Feb 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Understanding Terraform State</title>
            <link>http://watson-wilson.ca/blog/2017/04/17/terraform-state/</link>
            <guid>http://watson-wilson.ca/blog/2017/04/17/terraform-state/</guid>
            <description><![CDATA[
                <p><a href="https://terraform.io/"><img alt="terraform logo" src="https://raw.githubusercontent.com/hashicorp/terraform-website/master/content//source/assets/images/og-image.png" style="float:right" width="120px"></a></p>

<p>Terraform <a href="https://www.terraform.io/docs/state/purpose.html">state</a> is a database kept by Terraform to help it reconcile Terraform resource dependencies, and reconcile between Terraform code and the actual state on the target infrastructure. For example, in the state, Terraform expects to find an entry that matches your AWS resource defining a Route53 record and in your Terraform code. Whether or not the entry exits determines if Terraform will make a change or not.</p>

                    <p><a href="http://watson-wilson.ca/blog/2017/04/17/terraform-state/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://watson-wilson.ca/blog/tag/terraform/">terraform</a>
                    <a href="http://watson-wilson.ca/blog/tag/configuration-management/">configuration management</a>
                    <a href="http://watson-wilson.ca/blog/tag/cloud/">cloud</a>
                    <a href="http://watson-wilson.ca/blog/tag/aws/">AWS</a>
                </p>
            ]]></description>
            <pubDate>
                Mon, 17 Apr 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Terraform modules</title>
            <link>http://watson-wilson.ca/blog/2017/03/30/terraform-modules/</link>
            <guid>http://watson-wilson.ca/blog/2017/03/30/terraform-modules/</guid>
            <description><![CDATA[
                <p><a href="https://terraform.io/"><img alt="terraform logo" src="https://raw.githubusercontent.com/hashicorp/terraform-website/master/content//source/assets/images/og-image.png" style="float:right" width="120px"></a></p>

<p>Here&#39;s what I&#39;ve learned so far using Terraform and its modules. I&#39;ve just scratched the surface so test and research on your own.</p>

                    <p><a href="http://watson-wilson.ca/blog/2017/03/30/terraform-modules/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://watson-wilson.ca/blog/tag/terraform/">terraform</a>
                    <a href="http://watson-wilson.ca/blog/tag/cloud/">cloud</a>
                    <a href="http://watson-wilson.ca/blog/tag/configuration-management/">configuration management</a>
                    <a href="http://watson-wilson.ca/blog/tag/aws/">AWS</a>
                </p>
            ]]></description>
            <pubDate>
                Thu, 30 Mar 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Bosh and Cloud Foundry, an intro</title>
            <link>http://watson-wilson.ca/blog/2016/10/10/cloudfoundry/</link>
            <guid>http://watson-wilson.ca/blog/2016/10/10/cloudfoundry/</guid>
            <description><![CDATA[
                <p><a href="https://cloudfoundry.org/"><img alt="cloudfoundry website" src="http://watson-wilson.ca/static/images/Cloud-Foundry-Logo.png" style="float:right" width="120px"></a></p>

<p><a href="https://www.cloudfoundry.org/">Cloud Foundry</a> is an open source platform as a service product owned by Pivotal Software. CF allows you to deploy applications to containers on AWS, Azue, VMware vSphere, and others.</p>

                    <p><a href="http://watson-wilson.ca/blog/2016/10/10/cloudfoundry/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://watson-wilson.ca/blog/tag/cloud/">cloud</a>
                    <a href="http://watson-wilson.ca/blog/tag/cloud-foundry/">cloud foundry</a>
                    <a href="http://watson-wilson.ca/blog/tag/bosh/">bosh</a>
                    <a href="http://watson-wilson.ca/blog/tag/containers/">containers</a>
                </p>
            ]]></description>
            <pubDate>
                Mon, 10 Oct 2016 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Introduction to Terraform</title>
            <link>http://watson-wilson.ca/blog/2016/01/08/terraform-intro/</link>
            <guid>http://watson-wilson.ca/blog/2016/01/08/terraform-intro/</guid>
            <description><![CDATA[
                <p><a href="https://terraform.io/"><img alt="terraform logo" src="https://raw.githubusercontent.com/hashicorp/terraform-website/master/content//source/assets/images/og-image.png" style="float:right" width="120px"></a></p>

<p><a href="https://terraform.io/">Terraform</a> allows you to manage your AWS, and other
cloud infrastructure, the same way you would manage servers using configuration
management products like CFEngine or Puppet. Terraform is idempotent and
convergent so only required changes are applied.</p>

                    <p><a href="http://watson-wilson.ca/blog/2016/01/08/terraform-intro/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://watson-wilson.ca/blog/tag/terraform/">terraform</a>
                    <a href="http://watson-wilson.ca/blog/tag/cloud/">cloud</a>
                    <a href="http://watson-wilson.ca/blog/tag/configuration-management/">configuration management</a>
                </p>
            ]]></description>
            <pubDate>
                Fri, 08 Jan 2016 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

