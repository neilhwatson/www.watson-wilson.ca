<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://watson-wilson.ca/blog/tag/cli/</id>
    <title>Neil H. Watson</title>
    <updated>2016-11-15T00:00:00Z</updated>
    <link href="http://watson-wilson.ca/blog/tag/cli.atom" rel="self" />
    <link href="http://watson-wilson.ca/blog/tag/cli/" rel="alternate" />
    <generator version="0.094">Statocles</generator>
    <entry>
        <id>http://watson-wilson.ca/blog/2016/11/15/docker_api_from_cli/</id>
        <title>Docker API from CLI</title>
        <link href="http://watson-wilson.ca/blog/2016/11/15/docker_api_from_cli/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="https://docker.com/"><img alt="Docker website" src="http://watson-wilson.ca/static/images/docker-logo.png" style="float:right" width="120px"></a></p>

<p>Docker has command line programs, but they are not well suited to automation.
Return values and pars-able output are both lacking, but there is an
<a href="https://docs.docker.com/engine/reference/api/docker_remote_api/">API</a> that you
can use instead. The Dockerd api can listen on a local socket or even a
remote accessible port, but in these examples I&#39;ll show local socket only.</p>

                <p><a href="http://watson-wilson.ca/blog/2016/11/15/docker_api_from_cli/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/docker/">docker</a>
                <a href="http://watson-wilson.ca/blog/tag/containers/">containers</a>
                <a href="http://watson-wilson.ca/blog/tag/jq/">jq</a>
                <a href="http://watson-wilson.ca/blog/tag/json/">json</a>
                <a href="http://watson-wilson.ca/blog/tag/cli/">cli</a>
            </p>
        ]]></content>
        <updated>2016-11-15T00:00:00Z</updated>
        <category term="docker" />
        <category term="containers" />
        <category term="jq" />
        <category term="json" />
        <category term="cli" />
    </entry>
    <entry>
        <id>http://watson-wilson.ca/blog/2011/03/08/shell-cheatsheet/</id>
        <title>Shell cheatsheet</title>
        <link href="http://watson-wilson.ca/blog/2011/03/08/shell-cheatsheet/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The following may not apply to all shells.</p>

<h2>Job control</h2>

<ul>
<li>Resume job after suspend: <code>ctrl-q</code></li>
<li>Resume job in background: <code>bg &lt;job number&gt;</code></li>
<li>Resume job in foreground: <code>fg &lt;job number&gt;</code></li>
<li>Suspend delay (suspend at stdin): <code>ctrl-y</code></li>
<li>Suspend:  <code>ctrl-z</code></li>
</ul>

<h2>Command line laziness</h2>

<ul>
<li>Recall history line 66: <code>!66</code></li>
<li>Recall last command: <code>!!</code></li>
<li>Recall last arguement from last command: <code>!$</code></li>
<li>Recall all arguements from last command: <code>!*</code></li>
<li>Clear shell history: <code>history -c</code></li>
<li>Delete shell history entry: <code>history -d &lt;number&gt;</code></li>
<li>Rename rpmnew files:</li>
</ul>

<pre><code class="hljs">find -type f -name <span class="hljs-string">&quot;*.rpmnew&quot;</span> <span class="hljs-keyword">|</span> sed <span class="hljs-string">&#39;s/\(^.*\)\(\.rpmnew\)$/mv -f \1\2 \1/&#39;</span> <span class="hljs-keyword">|</span>sh
</code></pre>

<ul>
<li>Search and replace files in place:</li>
</ul>

<pre><code class="hljs">find /path -name <span class="hljs-string">&quot;*.*&quot;</span> -exec <span class="hljs-keyword">|</span> perl -pi -e <span class="hljs-string">&#39;s///g&#39;</span> <span class="hljs-type">{}</span> <span class="hljs-type">\;</span>
</code></pre>

<ul>
<li>vi cli editing: <code>set -o vi</code> Now esc to enter command mode where vi keys
work. Pressing enter returns to normal mode.</li>
</ul>

                <p><a href="http://watson-wilson.ca/blog/2011/03/08/shell-cheatsheet/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/shell/">shell</a>
                <a href="http://watson-wilson.ca/blog/tag/cli/">cli</a>
                <a href="http://watson-wilson.ca/blog/tag/cheatsheet/">cheatsheet</a>
            </p>
        ]]></content>
        <updated>2011-03-08T00:00:00Z</updated>
        <category term="shell" />
        <category term="cli" />
        <category term="cheatsheet" />
    </entry>
    <entry>
        <id>http://watson-wilson.ca/blog/2011/03/08/gnu-screen-cheatsheet/</id>
        <title>GNU Screen cheatsheet</title>
        <link href="http://watson-wilson.ca/blog/2011/03/08/gnu-screen-cheatsheet/" rel="alternate" />
        <content type="html"><![CDATA[
            <table>
<tr>
    <td>Change to other region</td>
    <td><code>ctrl-a tab</code></td>
</tr>
<tr>
    <td>Change to other screen</td>
    <td><code>ctrl-a 0-9</code></td>
</tr>
<tr>
    <td>Detach</td>
    <td><code>ctrl-a d</code></td>
</tr>
<tr>
    <td>Help</td>
    <td><code>ctrl-a ?</code></td>
</tr>
<tr>
    <td>Kill screen</td>
    <td><code>ctrl-a \</code></td>
</tr>
<tr>
    <td>Kill region</td>
    <td><code>ctrl-a x</code></td>
</tr>
<tr>
    <td>New screen</td>
    <td><code>ctrl-a c</code></td>
</tr>
<tr>
    <td>Reattach</td>
    <td><code>screen -r</code></td>
</tr>
<tr>
    <td>Serial connection</td>
    <td><code>screen /dev/ttyUSB0 9600</code></td>
</tr>
<tr>
    <td>Split</td>
    <td><code>ctrl-a s</code></td>
</tr>
</table>

                <p><a href="http://watson-wilson.ca/blog/2011/03/08/gnu-screen-cheatsheet/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://watson-wilson.ca/blog/tag/shell/">shell</a>
                <a href="http://watson-wilson.ca/blog/tag/cli/">cli</a>
                <a href="http://watson-wilson.ca/blog/tag/cheatsheet/">cheatsheet</a>
            </p>
        ]]></content>
        <updated>2011-03-08T00:00:00Z</updated>
        <category term="shell" />
        <category term="cli" />
        <category term="cheatsheet" />
    </entry>
</feed>

